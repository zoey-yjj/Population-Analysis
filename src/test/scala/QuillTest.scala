import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.matchers.should.Matchers.*

class QuillTest  extends AnyFunSuite:

  test("Total population query is correct") {
    assert(totalPopulation() == Option(4321169))
  }

  test("Total population by gender query is correct") {
    assert(totalPopulationByGender().to(Set) == Set(("Female", 2209142), ("Male", 2112027)))
  }

  test("Children born in 2021 by ethnicity") {
    assert(childrenBornIn2021ByEthnicity().to(Set) == Set(("Chinese", 2.3006264501109123E7), ("Malays", 8211038.182481766), ("Indians", 3217642.729457855), ("Others", 1672128.0249166489)))
  }

  test("Children born every year") {
    assert(childrenBornEveryYear() == List((1971, 47845.25059108734), (1972, 50507.03019599915), (1973, 49177.34897918703), (1974, 44044.95967197421), (1975, 40737.02124462128), (1976, 43575.610904884335), (1977, 39167.759941387194), (1978, 40280.94168052672), (1979, 41672.39938087462), (1980, 40931.87010576438), (1981, 41909.88486312866), (1982, 42192.38920715715), (1983, 40137.74437879182), (1984, 41106.682023818976), (1985, 42031.5939819927), (1986, 37956.204030419336), (1987, 43371.19342836187), (1988, 52714.03544555664), (1989, 47480.78819763943), (1990, 50960.67184727479), (1991, 48810.680100521095), (1992, 49077.180702308666), (1993, 50016.03822054479), (1994, 49179.278692632695), (1995, 48145.35737143233), (1996, 47935.20034311103), (1997, 46637.17941090581), (1998, 42771.364334321035), (1999, 42273.75531024359), (2000, 46043.76484600831), (2001, 40380.0087102785), (2002, 39513.7171722269), (2003, 36518.451078979466), (2004, 36245.22175840282), (2005, 36400.97777353286), (2006, 37419.29558137703), (2007, 38136.64756396292), (2008, 38424.67255759332), (2009, 37896.57978026583), (2010, 36084.64542178153), (2011, 37123.671023795134), (2012, 39796.97507088757), (2013, 37039.77208115867), (2014, 39475.42604177188), (2015, 39707.291577556614), (2016, 38529.420220543834), (2017, 37047.34245050429), (2018, 36872.341215931876), (2019, 37109.18930012893), (2020, 36064.8141032591), (2021, 36107.07343796537)))
  }

  test("Variance in yearly population growth") {
    val expected = List((1972, "Chinese", 1.0), (1972, "Malays", 0.7000003), (1972, "Indians", -0.20000029), (1972, "Others", -0.5000005), (1973, "Chinese", -0.80000067), (1973, "Malays", -2.4), (1973, "Indians", -2.6000009), (1973, "Others", 0.39999962), (1974, "Chinese", -2.7999992), (1974, "Malays", -2.2000003), (1974, "Indians", -0.69999933), (1974, "Others", 2.499999), (1975, "Chinese", -1.3999991), (1975, "Malays", -1.6000013), (1975, "Indians", -2.3000002), (1975, "Others", -1.5999994), (1976, "Chinese", 1.2999997), (1976, "Malays", -0.69999933), (1976, "Indians", -0.20000076), (1976, "Others", 0.30000162), (1977, "Chinese", -2.7000008), (1977, "Malays", -0.70000124), (1977, "Indians", 0.09999943), (1977, "Others", -2.4999995), (1978, "Chinese", 0.30000114), (1978, "Malays", 0.6000004), (1978, "Indians", 0.40000105), (1978, "Others", -0.79999924), (1979, "Chinese", 0.099998474), (1979, "Malays", 0.2999997), (1979, "Indians", 0.99999905), (1979, "Others", 1.8999987), (1980, "Chinese", 0.100001335), (1980, "Malays", 3.6999998), (1980, "Indians", 3.2999992), (1980, "Others", 11.899998), (1981, "Chinese", -0.20000029), (1981, "Malays", 0.99999905), (1981, "Indians", 0.0), (1981, "Others", 1.4000039), (1982, "Chinese", -0.19999886), (1982, "Malays", 0.100001335), (1982, "Indians", 9.536743E-7), (1982, "Others", 0.89999866), (1983, "Chinese", -1.5999999), (1983, "Malays", 0.2999997), (1983, "Indians", -0.40000057), (1983, "Others", -3.4999986), (1984, "Chinese", 0.2999997), (1984, "Malays", 0.70000124), (1984, "Indians", 0.3000002), (1984, "Others", 1.3999977), (1985, "Chinese", 0.0), (1985, "Malays", 0.29999924), (1985, "Indians", -0.49999905), (1985, "Others", 0.9000001), (1986, "Chinese", -1.8999991), (1986, "Malays", -0.19999838), (1986, "Indians", -0.100001335), (1986, "Others", -4.0999985), (1987, "Chinese", 2.0000005), (1987, "Malays", 1.2000012), (1987, "Indians", 0.70000124), (1987, "Others", 0.6999998), (1988, "Chinese", 3.6000004), (1988, "Malays", 0.8000002), (1988, "Indians", 0.7999983), (1988, "Others", 2.9000025), (1989, "Chinese", -3.1), (1989, "Malays", 1.0999994), (1989, "Indians", -0.29999924), (1989, "Others", -2.8000016), (1990, "Chinese", 1.0999999), (1990, "Malays", -4.7683716E-7), (1990, "Indians", 0.80000114), (1990, "Others", -0.50000143), (1991, "Chinese", -1.0999994), (1991, "Malays", -0.5999985), (1991, "Indians", -1.2000012), (1991, "Others", -1.3999987), (1992, "Chinese", -0.2999997), (1992, "Malays", -0.90000105), (1992, "Indians", 0.3000002), (1992, "Others", -1.5000029), (1993, "Chinese", 0.19999981), (1993, "Malays", -0.29999924), (1993, "Indians", -0.19999933), (1993, "Others", -1.6999998), (1994, "Chinese", -0.5000005), (1994, "Malays", -1.7000003), (1994, "Indians", -1.2999992), (1994, "Others", -0.60000086), (1995, "Chinese", -0.70000076), (1995, "Malays", -1.1000013), (1995, "Indians", -0.6000004), (1995, "Others", -1.6000004), (1996, "Chinese", -0.099999905), (1996, "Malays", -0.69999933), (1996, "Indians", -0.50000095), (1996, "Others", 0.30000067), (1997, "Chinese", -0.49999905), (1997, "Malays", -0.8000002), (1997, "Indians", -0.09999943), (1997, "Others", -0.9000001), (1998, "Chinese", -1.6999998), (1998, "Malays", -0.80000067), (1998, "Indians", -0.6999998), (1998, "Others", -1.8999996), (1999, "Chinese", -4.7683716E-7), (1999, "Malays", -1.2999992), (1999, "Indians", -1.1000004), (1999, "Others", 0.40000057), (2000, "Chinese", 1.0), (2000, "Malays", 0.39999962), (2000, "Indians", 0.20000076), (2000, "Others", 0.6999984), (2001, "Chinese", -1.9000006), (2001, "Malays", -1.0000014), (2001, "Indians", -0.6000004), (2001, "Others", -1.4000001), (2002, "Chinese", -0.4000001), (2002, "Malays", -1.6999989), (2002, "Indians", 0.10000014), (2002, "Others", -1.5999992), (2003, "Chinese", -0.9000001), (2003, "Malays", -1.1999998), (2003, "Indians", -0.7000003), (2003, "Others", 0.3999982), (2004, "Chinese", -0.099999905), (2004, "Malays", -0.20000076), (2004, "Indians", -0.39999986), (2004, "Others", 0.49999952), (2005, "Chinese", -0.09999943), (2005, "Malays", -0.6000004), (2005, "Indians", -4.7683716E-7), (2005, "Others", -2.2999997), (2006, "Chinese", 0.09999943), (2006, "Malays", -4.7683716E-7), (2006, "Indians", -0.10000038), (2006, "Others", 0.70000005), (2007, "Chinese", 4.7683716E-7), (2007, "Malays", -0.89999914), (2007, "Indians", -4.7683716E-7), (2007, "Others", 0.2999997), (2008, "Chinese", -0.10000038), (2008, "Malays", 0.09999943), (2008, "Indians", -0.49999952), (2008, "Others", 0.40000153), (2009, "Chinese", -0.2999997), (2009, "Malays", -0.6000004), (2009, "Indians", -4.7683716E-7), (2009, "Others", -1.3000004), (2010, "Chinese", -0.7000003), (2010, "Malays", -0.8000002), (2010, "Indians", 0.3000009), (2010, "Others", -0.9000015), (2011, "Chinese", 0.30000067), (2011, "Malays", -0.2999997), (2011, "Indians", -0.7000003), (2011, "Others", -0.29999995), (2012, "Chinese", 0.49999905), (2012, "Malays", 0.5999999), (2012, "Indians", 0.49999976), (2012, "Others", 1.3000008), (2013, "Chinese", -1.0999999), (2013, "Malays", -4.7683716E-7), (2013, "Indians", -0.29999995), (2013, "Others", -2.1), (2014, "Chinese", 0.6000004), (2014, "Malays", 0.5), (2014, "Indians", -0.39999986), (2014, "Others", -0.60000074), (2015, "Chinese", -0.2999997), (2015, "Malays", 0.80000114), (2015, "Indians", -4.7683716E-7), (2015, "Others", -1.4999996), (2016, "Chinese", -0.40000057), (2016, "Malays", 0.19999933), (2016, "Indians", -1.2000003), (2016, "Others", -1.0), (2017, "Chinese", -0.6999998), (2017, "Malays", 0.099999905), (2017, "Indians", -0.6999996), (2017, "Others", -1.8999996), (2018, "Chinese", -0.19999981), (2018, "Malays", 0.20000076), (2018, "Indians", -0.20000029), (2018, "Others", 0.49999952), (2019, "Chinese", 0.099999905), (2019, "Malays", -0.099999905), (2019, "Indians", -0.4000001), (2019, "Others", -1.8999994), (2020, "Chinese", -0.6000004), (2020, "Malays", 0.19999933), (2020, "Indians", -0.7999997), (2020, "Others", 0.19999933), (2021, "Chinese", -0.5999994), (2021, "Malays", -0.2999997), (2021, "Indians", -0.20000029), (2021, "Others", -1.4999995))
    val actual = growthRateYearlyVariance()
    expected.sorted.zip(actual.sorted).foreach {
      case (l, r) => assert(l._1 == r._1 && l._2 == r._2 && Math.abs(l._3 - r._3) < 0.001)
    }
  }